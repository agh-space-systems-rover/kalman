/**:
  ros__parameters:
    # Frequency of the main run loop. Defaults to 10.
    frequency: 10.0

    # Delay time, in seconds, before we calculate the transform from the UTM frame to your world frame. This is especially
    # important if you have use_odometry_yaw set to true. Defaults to 0.
    delay: 2.0
    # NOTE: I presume that due to initial IMU drift problems may arise. I did not test for this, but setting a delay won't hurt.

    # PLEASE READ: Like all nodes in robot_localization, this node assumes that your IMU data is reported in the ENU frame.
    # Many IMUs report data in the NED frame, so you'll want to verify that your data is in the correct frame before using
    # it.

    # If your IMU does not account for magnetic declination, enter the value for your location here. If you don't know it,
    # see http://www.ngdc.noaa.gov/geomag-web/ (make sure to convert the value to radians). This parameter is mandatory.
    magnetic_declination_radians: 0.0

    # Your IMU's yaw, once the magentic_declination_radians value is added to it, should report 0 when facing east. If it
    # doesn't, enter the offset here. Defaults to 0.
    yaw_offset: 0.0

    # If this is true, the altitude is set to 0 in the output odometry message. Defaults to false.
    zero_altitude: true

    # If this is true, the transform world_frame->utm transform is broadcast for use by other nodes. Defaults to false.
    broadcast_cartesian_transform: true

    # If this is true, the utm->world_frame transform will be published instead of the world_frame->utm transform. 
    # Note that broadcast_utm_transform still has to be enabled. Defaults to false.
    broadcast_cartesian_transform_as_parent_frame: false

    # If this is true, all received odometry data is converted back to a lat/lon and published as a NavSatFix message as
    # /gps/filtered. Defaults to true.
    publish_filtered_gps: true # unused, but kept enabled as a default value

    # If this is true, the node ignores the IMU data and gets its heading from the odometry source (typically the
    # /odometry/filtered topic coming from one of robot_localization's state estimation nodes). BE CAREFUL when using this!
    # The yaw value in your odometry source *must* be world-referenced, e.g., you cannot use your odometry source for yaw
    # if your yaw data is based purely on integrated velocities. Defaults to false.
    use_odometry_yaw: true
    # NOTE: Setting this to true might have fixed the issues with diverging map/odom due to bad fix orientation.
    # It is also possible that the lack of a delay back then caused the issue.

    # If true, will retrieve the datum from the 'datum' parameter below, if available. If no 'datum' parameter exists,
    # navsat_transform_node will wait until the user calls the 'datum' service with the SetDatum service message
    # wait_for_datum: false
    # NOTE: Datum parameter is set from within launch/slam.launch.py to allow for configuration via kalman_bringup.

    # Instead of using the first GPS location and IMU-based heading for the local-frame origin, users can specify the
    # origin (datum) using this parameter. The fields in the parameter represent latitude and longitude in decimal degrees,
    # and heading in radians. As navsat_transform_node assumes an ENU standard, a 0 heading corresponds to east.
    # datum: [38.161491, -122.4546443, 0.0] # pre-set datum if needed, [lat, lon, yaw]
    # If not provided, datum is automatically set using the first received GPS fix.
    # NOTE: Datum parameter is set from within launch/slam.launch.py to allow for configuration via kalman_bringup.
