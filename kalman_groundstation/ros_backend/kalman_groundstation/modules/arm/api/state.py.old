import rospy
from fastapi import APIRouter
from ..model.state import ArmState
from sensor_msgs.msg import JointState
from std_msgs.msg import Int8, Float64
from std_srvs.srv import Empty
from ..model.state import ServoStatus

state_router = APIRouter(prefix="/state", tags=["state"])

joint_states = ArmState().dict()
ARM_STATE_PATH = "/station/system/rover/arm/state/"
reset_servo_status = rospy.ServiceProxy("/servo_server/reset_servo_status", Empty)


def update_joint_states(msg: JointState):
    global joint_states
    for name, position in zip(msg.name, msg.position):
        joint_states[name] = position
    rospy.set_param(ARM_STATE_PATH, joint_states)


def update_servo_status(msg: Int8):
    global joint_states
    joint_states["servo_status"] = str(ServoStatus(msg.data))
    rospy.set_param(ARM_STATE_PATH, joint_states)


def update_collision_velocity_factor(msg: Float64):
    global joint_states
    joint_states["collision_velocity_factor"] = msg.data
    rospy.set_param(ARM_STATE_PATH, joint_states)

    # servo server sam debil nie resetuje jak wyjdzie z kolizji albo z singularity
    if (
        joint_states["collision_velocity_factor"] == 1
        and joint_states["servo_status"] == str(ServoStatus.DECELERATE_FOR_COLLISION)
    ) or joint_states["servo_status"] == str(ServoStatus.DECELERATE_FOR_SINGULARITY):
        reset_servo_status()


@state_router.get(
    "/",
    name="Get arm state",
    response_model=ArmState,
    response_description="Returns current state of arm",
)
async def get():
    return rospy.get_param(ARM_STATE_PATH)


joint_states_subscriber = rospy.Subscriber(
    "/arm_controllers/joint_states", JointState, callback=update_joint_states
)
servo_status_subscriber = rospy.Subscriber(
    "/servo_server/status", Int8, callback=update_servo_status
)
collision_velocity_factor_subscriber = rospy.Subscriber(
    "/servo_server/internal/collision_velocity_scale",
    Float64,
    callback=update_collision_velocity_factor,
)
